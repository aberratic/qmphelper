use clap::{Args, ValueEnum};
use qapi::qmp::BlockdevOnError as QapiBlockdevOnError;

/// An enumeration of possible behaviors for errors on I/O operations. The exact
/// meaning depends on whether the I/O was initiated by a guest or by a block job
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum BlockdevOnError {
    /// for guest operations, report the error to the guest; for jobs, cancel the job
    Report,
    /// ignore the error, only report a QMP event (BLOCK_IO_ERROR or BLOCK_JOB_ERROR).
    /// The backup, mirror and commit block jobs retry the failing request later and
    /// may still complete successfully. The stream block job continues to stream and
    /// will complete with an error.
    Ignore,
    /// same as stop on ENOSPC, same as report otherwise
    Enospc,
    /// for guest operations, stop the virtual machine; for jobs, pause the job
    Stop,
    /// inherit the error handling policy of the backend
    Auto,
}

impl Into<QapiBlockdevOnError> for BlockdevOnError {
    fn into(self) -> QapiBlockdevOnError {
        match self {
            BlockdevOnError::Report => QapiBlockdevOnError::report,
            BlockdevOnError::Ignore => QapiBlockdevOnError::ignore,
            BlockdevOnError::Enospc => QapiBlockdevOnError::enospc,
            BlockdevOnError::Stop => QapiBlockdevOnError::stop,
            BlockdevOnError::Auto => QapiBlockdevOnError::auto,
        }
    }
}

#[derive(Args, Debug, Clone)]
pub struct BlockCommitArguments {
    /// identifier for the newly-created block job. If omitted, the device name will
    /// be used.
    #[arg(long)]
    pub job_id: Option<String>,
    /// The device name or node-name of a root node
    #[arg(long)]
    pub device: String,
    /// The node name of the backing image to write data into. If not specified,
    /// this is the deepest backing image. (since: 3.1)
    #[arg(long)]
    pub base_node: Option<String>,
    /// Same as base-node, except that it is a file name rather than a node name. This must be the exact filename string that was used to open the node; other strings, even if addressing the same file, are not accepted
    #[deprecated(note = "Use base_node instead")]
    #[arg(long)]
    pub base: Option<String>,
    /// The node name of the backing image within the image chain which contains the topmost data to be committed down. If not specified, this is the active layer. (since: 3.1)
    #[arg(long)]
    pub top_node: Option<String>,
    /// Same as top-node, except that it is a file name rather than a node name. This must be the exact filename string that was used to open the node; other strings, even if addressing the same file, are not accepted
    #[deprecated(note = "Use top_node instead")]
    #[arg(long)]
    pub top: Option<String>,
    /// The backing file string to write into the overlay image of ‘top’. If ‘top’ does not have an overlay image, or if ‘top’ is in use by a writer, specifying a backing file string is an error.
    /// This filename is not validated. If a pathname string is such that it cannot be resolved by QEMU, that means that subsequent QMP or HMP commands must use node-names for the image in question, as filename lookup methods will fail.
    /// If not specified, QEMU will automatically determine the backing file string to use, or error out if there is no obvious choice. Care should be taken when specifying the string, to specify a valid filename or protocol. (Since 2.1)
    #[arg(long)]
    pub backing_file: Option<String>,
    /// the maximum speed, in bytes per second
    #[arg(long)]
    pub speed: Option<i64>,
    /// the action to take on an error. ‘ignore’ means that the request should be retried. (default: report; Since: 5.0)
    #[arg(long)]
    pub on_error: Option<BlockdevOnError>,
    /// the node name that should be assigned to the filter driver that the commit job inserts into the graph above top. If this option is not given, a node name is autogenerated. (Since: 2.9)
    #[arg(long)]
    pub filter_node_name: Option<String>,
    /// When false, this job will wait in a PENDING state after it has finished its work, waiting for block-job-finalize before making any block graph changes. When true, this job will automatically perform its abort or commit actions. Defaults to true. (Since 3.1)
    #[arg(long)]
    pub auto_finalize: Option<bool>,
    /// When false, this job will wait in a CONCLUDED state after it has completely ceased all work, and awaits block-job-dismiss. When true, this job will automatically disappear from the query list without user intervention. Defaults to true. (Since 3.1)
    #[arg(long)]
    pub auto_dismiss: Option<bool>,
}
